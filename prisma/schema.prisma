generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: Review address problem, if we will just create how a column or create a table with this data separing
// the information and just throw there or apply 3FN that we will need to create more tables like a state table?

// TODO: Review how access system will be.
model users {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
}

// TODO: customer needs address.
model customers {
  id             Int     @id @default(autoincrement())
  status         Int
  addressId      Int
  credit_limit   Float
  name           String
  phone          String
  cel_number     String
  email          String  @unique
  store_name     String
  deliver        Boolean
  pontalti       Boolean
  secondary_line Boolean
  cpf            String?
  cnpj           String?

  address adresses @relation(fields: [addressId], references: [id])
}

//TODO: to use "viacep" api to search for a new address if we haven't in our db
// viacep: https://viacep.com.br
model adresses {
  id           Int    @id @default(autoincrement())
  zip_code     String @unique
  neighborhood String
  public_place String
  city         String
  state        String

  customers customers[]
}

// TODO: employee needs address.
// TODO: Some doubts in how classification will works and confirm if phone and cel_number will be required.
model employees {
  id             Int       @id @default(autoincrement())
  name           String
  phone          String
  cel_number     String
  cpf            String    @unique
  classification Int
  admission      DateTime
  salary         Float?
  dismissal_date DateTime?
}

// TODO: employee needs address.
// TODO: Study better the "Faturamento na compra" implementation
model vendors {
  id               Int     @id @default(autoincrement())
  name             String
  store_name       String
  cnpj             String  @unique
  status           Int
  phone            String
  cel_number       String
  deliver          Boolean
  volume_purchases Float
  purchases        Float
  billing          Float
}

// TODO: needs to study "Material produtivo" implementation
